<?php

namespace Zoho\Subscription\model;

class Subscription
{
    /**
     * Unique ID generated for a subscription.
     *
     * @var string
     */
    protected $subscriptionId = null;

    /**
     * Name generated by concatenation of the product name and the selected plan.
     *
     * @var string
     */
    protected $name = '';

    /**
     * Customer object of the customer for whom you want to create a subscription.
     *
     * @var Customer
     */
    protected $customer = null;

    /**
     * List of contact person objects
     *
     * @var array
     */
    protected $contactpersons = array();

    /**
     * The amount that needs to be charged for the subscription.
     *
     * @var float
     */
    protected $amount = 0;

    /**
     * Product ID of the product to which the plan is associated with.
     *
     * @var string
     */
    protected $productId = '';

    /**
     * Plan object for which the subscription is to be created.
     *
     * @var Plan
     */
    protected $plan = null;

    /**
     * List of addon objects which are to be included in the subscription.
     *
     * @var array
     */
    protected $addons = array();

    /**
     * The object containing the details of the added coupon.
     *
     * @var Coupon
     */
    protected $coupon = null;

    /**
     * List of Custom Field values created for a customer.
     *
     * @var array
     */
    protected $customFields = array();

    /**
     * The date on which the trial starts.
     *
     * @var string
     */
    protected $trialStartsAt = '';

    /**
     * The date on which the trial ends.
     *
     * @var string
     */
    protected $trialEndsAt = '';

    /**
     * A subscription is activated after the first customer payment is received.
     *
     * @var string
     */
    protected $activatedAt = '';

    /**
     * A string of your choice is required to easily identify and keep track of your subscriptions.
     *
     * @var string
     */
    protected $referenceId = '';

    /**
     * Customer’s currency code.
     *
     * @var string
     */
    protected $currencyCode = '';

    /**
     * Customer’s currency symbol.
     *
     * @var string
     */
    protected $currencySymbol = '';

    /**
     * This will be the exchange rate provided for the organization’s currency and the customer’s currency.
     * The subscription fee would be the multiplicative product of the original price and the exchange rate.
     *
     * @var float
     */
    protected $exchangeRate = 0;

    /**
     * Generally the subscription will start on the day it is created, but if you want to start the
     * subscription on a specific date then the date can be provided. The subscription status would be future
     * till the starts_at date.
     *
     * @var string
     */
    protected $startsAt = '';

    /**
     * Set to true for charging customer’s card automatically.
     *
     * @var boolean
     */
    protected $autoCollect = false;

    /**
     * Sales person id of the sales person needs to be associated with the subscriptions.
     *
     * @var string
     */
    protected $salesPersonId = '';

    /**
     * The name of the sales person who need to be associated with the subscription.
     *
     * @var string
     */
    protected $salesPersonName = '';

    /**
     * Customer’s card object.
     *
     * @var Card
     */
    protected $card = null;

    /**
     * Invoice ID of the most recent invoice to which the subscription is associated with.
     *
     * @var string
     */
    protected $childInvoiceId = '';

    /**
     * Indicates the number of intervals between each billing. If interval=2, the customer
     * would be billed every two months or years depending on the value for interval_unit.
     *
     * @var string
     */
    protected $interval = '';

    /**
     * It can be either months or years. For interval=2 and interval_unit=months, the customer
     * is billed every two months.
     *
     * @var string
     */
    protected $intervalUnit = '';

    /**
     * Date on which the current term of the subscription started.
     *
     * @var string
     */
    protected $currentTermStartsAt = '';

    /**
     * Date on which the current term of the subscription ends.
     *
     * @var string
     */
    protected $currentTermEndsAt = '';

    /**
     * This is applicable only when billing_cycle is set for a plan. A subscription expires
     * on the last day of the last billing cycle.
     *
     * @var string
     */
    protected $expiresAt = '';

    /**
     * The date on which the customer was billed last.
     *
     * @var string
     */
    protected $lastBillingAt = '';

    /**
     * The date on which the customer will be billed next. This will also be the date on which
     * the next term of the subscription starts.
     *
     * @var string
     */
    protected $nextBillingAt = '';

    /**
     * The date on which a subscription is cancelled. Customers can cancel a subscription themselves.
     * It can also be cancelled if a customer’s card couldn’t be charged even after multiple attempts.
     *
     * @var string
     */
    protected $cancelledAt = '';

    /**
     * This is applicable only when a subscription is cancelled. It is set to user when customers cancel
     * the subscription themselves. It is set to scheduler if it gets cancelled by the customer due to
     * payment failures during renewal.
     *
     * @var string
     */
    protected $source = '';

    /**
     * If payment fails at the time of renewing a subscription, there will be another attempt made to process
     * at a later *date* which is to be specified here.
     *
     * @var string
     */
    protected $nextRetryAt = '';

    /**
     * List of note objects
     *
     * @var array
     */
    protected $notes = array();

    /**
     * Used when we make a POST to ZOHO API
     */
    public static function createSubscription()
    {

    }

    /**
     * Used when we make a get subscription
     *
     * @param array|null $data
     */
    public function __construct($data = null)
    {
        if ($data) {
            $this->subscriptionId = $data->subscriptionId;
            $this->name = $data->name;
            $this->customer = $data->customer;
            $this->contactpersons = $data->contactpersons;
            $this->amount = $data->amount;
            $this->productId = $data->productId;
            $this->plan = $data->plan;
            $this->addons = $data->addons;
            $this->coupon = $data->coupon;
            $this->customFields = $data->customFields;
            $this->trialStartsAt = $data->trialStartsAt;
            $this->trialEndsAt = $data->trialEndsAt;
            $this->activatedAt = $data->activatedAt;
            $this->referenceId = $data->referenceId;
            $this->currencyCode = $data->currencyCode;
            $this->currencySymbol = $data->currencySymbol;
            $this->exchangeRate = $data->exchangeRate;
            $this->startsAt = $data->startsAt;
            $this->autoCollect = $data->autoCollect;
            $this->salesPersonId = $data->salesPersonId;
            $this->salesPersonName = $data->salesPersonName;
            $this->card = $data->card;
            $this->childInvoiceId = $data->childInvoiceId;
            $this->interval = $data->interval;
            $this->intervalUnit = $data->intervalUnit;
            $this->currentTermStartsAt = $data->currentTermStartsAt;
            $this->currentTermEndsAt = $data->currentTermEndsAt;
            $this->expiresAt = $data->expiresAt;
            $this->lastBillingAt = $data->lastBillingAt;
            $this->nextBillingAt = $data->nextBillingAt;
            $this->cancelledAt = $data->cancelledAt;
            $this->source = $data->source;
            $this->nextRetryAt = $data->nextRetryAt;
            $this->notes = $data->notes;

        }
    }


    /**
     * Get the subscriptionId
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->subscriptionId;
    }

    /**
     * Get the name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Get the customer
     *
     * @return Customer
     */
    public function getCustomer()
    {
        return $this->customer;
    }

    /**
     * Get the contactpersons
     *
     * @return array
     */
    public function getContactpersons()
    {
        return $this->contactpersons;
    }

    /**
     * Get the amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * Get the productId
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->productId;
    }

    /**
     * Get the plan
     *
     * @return Plan
     */
    public function getPlan()
    {
        return $this->plan;
    }

    /**
     * Get the addons
     *
     * @return array
     */
    public function getAddons()
    {
        return $this->addons;
    }

    /**
     * Get the coupon
     *
     * @return Coupon
     */
    public function getCoupon()
    {
        return $this->coupon;
    }

    /**
     * Get the customFields
     *
     * @return array
     */
    public function getCustomFields()
    {
        return $this->customFields;
    }

    /**
     * Get the trialStartsAt
     *
     * @return string
     */
    public function getTrialStartsAt()
    {
        return $this->trialStartsAt;
    }

    /**
     * Get the trialEndsAt
     *
     * @return string
     */
    public function getTrialEndsAt()
    {
        return $this->trialEndsAt;
    }

    /**
     * Get the activatedAt
     *
     * @return string
     */
    public function getActivatedAt()
    {
        return $this->activatedAt;
    }

    /**
     * Get the referenceId
     *
     * @return string
     */
    public function getReferenceId()
    {
        return $this->referenceId;
    }

    /**
     * Get the currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->currencyCode;
    }

    /**
     * Get the currencySymbol
     *
     * @return string
     */
    public function getCurrencySymbol()
    {
        return $this->currencySymbol;
    }

    /**
     * Get the exchangeRate
     *
     * @return float
     */
    public function getExchangeRate()
    {
        return $this->exchangeRate;
    }

    /**
     * Get the startsAt
     *
     * @return string
     */
    public function getStartsAt()
    {
        return $this->startsAt;
    }

    /**
     * Get the autoCollect
     *
     * @return boolean
     */
    public function isAutoCollect()
    {
        return $this->autoCollect;
    }

    /**
     * Get the salesPersonId
     *
     * @return string
     */
    public function getSalesPersonId()
    {
        return $this->salesPersonId;
    }

    /**
     * Get the salesPersonName
     *
     * @return string
     */
    public function getSalesPersonName()
    {
        return $this->salesPersonName;
    }

    /**
     * Get the card
     *
     * @return Card
     */
    public function getCard()
    {
        return $this->card;
    }

    /**
     * Get the childInvoiceId
     *
     * @return string
     */
    public function getChildInvoiceId()
    {
        return $this->childInvoiceId;
    }

    /**
     * Get the interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->interval;
    }

    /**
     * Get the intervalUnit
     *
     * @return string
     */
    public function getIntervalUnit()
    {
        return $this->intervalUnit;
    }

    /**
     * Get the currentTermStartsAt
     *
     * @return string
     */
    public function getCurrentTermStartsAt()
    {
        return $this->currentTermStartsAt;
    }

    /**
     * Get the currentTermEndsAt
     *
     * @return string
     */
    public function getCurrentTermEndsAt()
    {
        return $this->currentTermEndsAt;
    }

    /**
     * Get the expiresAt
     *
     * @return string
     */
    public function getExpiresAt()
    {
        return $this->expiresAt;
    }

    /**
     * Get the lastBillingAt
     *
     * @return string
     */
    public function getLastBillingAt()
    {
        return $this->lastBillingAt;
    }

    /**
     * Get the nextBillingAt
     *
     * @return string
     */
    public function getNextBillingAt()
    {
        return $this->nextBillingAt;
    }

    /**
     * Get the cancelledAt
     *
     * @return string
     */
    public function getCancelledAt()
    {
        return $this->cancelledAt;
    }

    /**
     * Get the source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }


    /**
     * Get the nextRetryAt
     *
     * @return string
     */
    public function getNextRetryAt()
    {
        return $this->nextRetryAt;
    }

    /**
     * Get the notes
     *
     * @return array
     */
    public function getNotes()
    {
        return $this->notes;
    }
}
